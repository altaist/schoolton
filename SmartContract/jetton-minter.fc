(int, slice, cell, cell) fetch_data() inline {
  slice data_slice = get_data().begin_parse();
  return (
      data_slice~load_coins(),
      data_slice~load_msg_addr(),
      data_slice~load_ref(),
      data_slice~load_ref()
  );
}

() store_data(int total_supply, slice admin, cell meta_data, cell jetton_code) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin)
            .store_ref(meta_data)
            .store_ref(jetton_code)
           .end_cell()
          );
}

() issue_tokens(slice recipient, cell jetton_code, int amount, cell main_message) impure {
  cell init_state = derive_jetton_wallet_state(recipient, my_address(), jetton_code);
  slice wallet_addr = compute_jetton_wallet_address(init_state);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(wallet_addr)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(init_state)
    .store_ref(main_message);
  send_raw_message(msg.end_cell(), 1);
}

() receive_internal(int msg_value, cell full_msg, slice msg_body) impure {
    if (msg_body.slice_empty?()) {
        return ();
    }
    slice cs = full_msg.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    slice sender = cs~load_msg_addr();
  
    int operation = msg_body~load_uint(32);
    int request_id = msg_body~load_uint(64);

    (int total_supply, slice admin, cell meta_data, cell jetton_code) = fetch_data();

    if (operation == op::issue()) {
        throw_unless(73, equal_slices(sender, admin));
        slice recipient = msg_body~load_msg_addr();
        int amount = msg_body~load_coins();
        cell main_message = msg_body~load_ref();
        slice main_msg_slice = main_message.begin_parse();
        main_msg_slice~skip_bits(32 + 64);
        int jetton_amount = main_msg_slice~load_coins();
        issue_tokens(recipient, jetton_code, amount, main_message);
        store_data(total_supply + jetton_amount, admin, meta_data, jetton_code);
        return ();
    }

    if (operation == op::burn_notice()) {
        int jetton_amount = msg_body~load_coins();
        slice origin = msg_body~load_msg_addr();
        throw_unless(74,
            equal_slices(compute_user_jetton_wallet_address(origin, my_address(), jetton_code), sender)
        );
        store_data(total_supply - jetton_amount, admin, meta_data, jetton_code);
        slice response_addr = msg_body~load_msg_addr();
        if (response_addr.preload_uint(2) != 0) {
          var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(response_addr)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::surplus(), 32)
            .store_uint(request_id, 64);
          send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (operation == 3) {
        throw_unless(73, equal_slices(sender, admin));
        slice new_admin = msg_body~load_msg_addr();
        store_data(total_supply, new_admin, meta_data, jetton_code);
        return ();
    }

    if (operation == 4) {
        throw_unless(73, equal_slices(sender, admin));
        store_data(total_supply, admin, msg_body~load_ref(), jetton_code);
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) retrieve_jetton_data() method_id {
    (int total_supply, slice admin, cell meta_data, cell jetton_code) = fetch_data();
    return (total_supply, -1, admin, meta_data, jetton_code);
}

slice fetch_wallet_address(slice owner) method_id {
    (int total_supply, slice admin, cell meta_data, cell jetton_code) = fetch_data();
    return compute_user_jetton_wallet_address(owner, my_address(), jetton_code);
}
